<?php
/**
 * @file
 * QBWC Interface.
 *
 * Direct interface with Quickbooks Webconnector. Establish SOAP server at customizable endpoint and pass QBXML requests and responses via Drupal hooks. Generates QWC and WSDL files.
 *
 * This is a very small and simple module. It performs the following functions:
 * <ul>
 * <li>use the PHP SoapServer class to perform base SOAP communications in accordance with the Webconnector's WSDL protocol and generates the WSDL file .</li>
 * <li>generate an appropriate QWC configuration file to be used by the Webconnector to connect with the Drupal site</li>
 * <li>generate random initial endpoint, username, and password combination and allows customization through user interface
 * <li>provide hooks for other modules to handle incoming and outgoing QBXML requests. See qbwc.api.php for details</li>
 * </ul>
 *
 * Rationale
 *
 * Quickbooks stand-alone and point-of-sale desktop applications can share data with outside sources via the Quickbooks Webconnector. The Webconnector is a SOAP client requiring a SOAP server. It establishes a connection and then allows the SOAP server to act as an XML client to Quickbooks.
 *
 * Because each side of this communications link acts as a client in one respect and a server in another respect, the whole question of whether Drupal acts as the server or the client in this exchange depends on the level at which the exchange is viewed. Server modules like Services are inappropriate as Drupal itself is not a server. And client modules are inappropriate because the can not act as a server accepting an incoming SOAP client request.
 *
 * QBWC Interface resolves this by acting as a SOAP server to establish the connection to Quickbooks Webconnector and then steps back and acts as a conduit for Drupal, which then acts as a client passing requests and responses back and forth via Drupal hooks.
 *
 * QBWC Interface does not make any assumptions about incoming or outgoing requests and responses and leaves that entirely to other modules. The other modules need only hook into its two offered hooks to begin receiving and sending requests in accordance with the QB XML specification.
 */

require_once 'qbwc.inc';

function _qbwc_connection_list() {
  // $endpoints = db_
  $result = db_query( "SELECT * FROM {qbwc}" );
  return $result->fetchAll();
}

/**
 * Implements hook_menu().
 */
function qbwc_menu() {

  foreach( _qbwc_connection_list() as $connection ) {
    $items[$connection->endpoint] = array(
      'type' => MENU_CALLBACK,
      'title' => 'Access endpoint for Quickbooks Web Connector ',
      'page callback' => 'qbwc_endpoint',
      'file' => 'qbwc.endpoint.inc',
      'access arguments' => array('access content'),
    );
    $items[$connection->endpoint . '.wsdl'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'WSDL generator for Quickbooks Web Connector ',
      'page callback' => 'qbwc_wsdl_output',
      'access arguments' => array('access content'),
      'file' => 'qbwc.wsdl.inc',
    );
   
  }
  // build menu base structure if it doesn't exist
  $items[QBWC_MENUROUTE] = array(
    'title' => 'Enterprise',
    'description' => 'Enterprise configuration',
    'weight' => -8,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items[QBWC_MENUROUTE . '/qbwc'] = array(
    'title' => 'Quickbooks WebConnector',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Set access parameters for Quickbooks Web Connector module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qbwc_admin_overview'),
    'access arguments' => array('administer site configuration'),
    'file' => 'qbwc.admin.inc',
    // 'parent' => 'admin/config/enterprise'
  );
  $items[QBWC_MENUROUTE . '/qbwc/add'] = array(
    'title' => 'Add Webconnector',
    'description' => 'Configure a new Webconnector connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qbwc_connection_edit_form', NULL, 'add'),
    'access arguments' => array('administer site configuration'),
    'file' => 'qbwc.admin.inc',
  );
  // $basepath = qbwc_MENUPARENT . /qbwc;
  $items[QBWC_MENUROUTE . '/qbwc/%qbwc_connection/%'] = array(
    'title' => 'Webconnector connection configurator',
    'description' => 'Configure Webconnector connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qbwc_connection_edit_form', 4, 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'qbwc.admin.inc',
    // 'redirect' =>
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function qbwc_help($path, $arg) {
  switch($path) {
     case QBWC_MENUROUTE . '/qbwc':
      $output = t('Specify the endpoint, username and password used by the Quickbooks Web Connector in its .QWC file.
      This user / password combination is not related to Drupal nor Quickbooks users or passwords.
      They are set here and in the QWC file independently of Drupal and Quickbooks users and passwords.');
      break;
    case 'admin/help#qbwc':
      $output = '<p>' . t('QBWC Interface is the intermediary between Drupal and the Quickbooks Webconnector. ' .
          'The username and password set in this interface correspond to the username and password ' .
          'set in the Webconnector\'s .QWC file. The interface generates appropriate QBWC SOAP endpoints ' .
          'and their corresponding .WSDL and .QWC files') . '</p>';
      break;
    default:
      $output = '';
  }
  return $output;
}

/**
 * Implements hook_hook_info()
 */
function qbwc_hook_info() {
  $hooks['qbwc_receiveResponseXML'] = array('group' => 'qbwc');
  $hooks['qbwc_sendRequestXML'] = array('group' => 'qbwc');
  $hooks['qbwc_closeConnection'] = array('group' => 'qbwc');
  $hooks['qbwc_companyInfo'] = array('group' => 'qbwc');
  return ($hooks);
}

/**
 * Utility to clear output buffer so XML output is clean
 */
function qbwc_ob_reset() {
  if(ob_get_level()) {
    ob_end_clean();
  }
  ob_start();
}

/**
 * Print XML string with appropriate headers and close out connection
 *
 * @param String $xmlstr The string to print
 * @param String $contenttype Optional content type for header
 **/
function qbwc_print_xml_exit($xmlstr, $contenttype = 'text/xml') {
  drupal_add_http_header('Connection', 'close', FALSE);
  drupal_add_http_header('Content-Type', $contenttype, FALSE);
  drupal_send_headers();
  qbwc_ob_reset();

  print '<?xml version="1.0" encoding="utf-8"?>';
  print $xmlstr;

  drupal_exit();
}

/**
 * Utility to create GUID since com_create_guid can not be relied on to exist
 * source: Dave Pearson's snippet at http://php.net/manual/en/function.com-create-guid.php
 */
function qbwc_GUID($trim = true) {
  // Windows
  if(function_exists('com_create_guid') === true) {
    if($trim === true)
      return trim(com_create_guid(), '{}');
    else
      return com_create_guid();
  }

  // OSX/Linux
  if(function_exists('openssl_random_pseudo_bytes') === true) {
    $data = openssl_random_pseudo_bytes(16);
    $data[6] = chr(ord($data[6]) & 0x0f | 0x40);    // set version to 0100
    $data[8] = chr(ord($data[8]) & 0x3f | 0x80);    // set bits 6-7 to 10
    return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
  }

  // Fallback (PHP 4.2+)
  mt_srand((double)microtime() * 10000);
  $charid = strtolower(md5(uniqid(rand(), true)));
  $hyphen = chr(45);                  // "-"
  $lbrace = $trim ? "" : chr(123);    // "{"
  $rbrace = $trim ? "" : chr(125);    // "}"
  $guidv4 = $lbrace .
    substr($charid, 0, 8) . $hyphen .
    substr($charid, 8, 4) . $hyphen .
    substr($charid, 12, 4) . $hyphen .
    substr($charid, 16, 4) . $hyphen .
    substr($charid, 20, 12) .
    $rbrace;
  return $guidv4;
}

/**
 * Menu loader
 */
function qbwc_connection_load($id) {
  return db_select('qbwc', 't')
    ->fields('t')
    ->condition('id', $id)
    ->execute()->fetchObject();
}
