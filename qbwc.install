<?php
/**
 * @file
 * Install, update, and uninstall functions for the qbwc module.
 */

require_once 'qbwc.inc';

/**
 * Implements hook_requirements()
 */
function qbwc_requirements()
{
  $requirements = array();
  // Ensure translations do not break at install time
  $t = get_t();

  $requirements['qbwc'] = array(
    'title' => $t('qbwc'),
  );

  global $base_url;

  if(!(isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off' || stristr($base_url, 'localhost'))) {
    $requirements['qbwc']['value'] = $t('Not Installed');
    $requirements['qbwc']['severity'] = REQUIREMENT_ERROR;
    $requirements['qbwc']['description'] = $t('Quickbooks Webconnector requires secure connection. You must your Drupal site set up as HTTPS. For testing purposes ONLY, you may bypass this by putting the word "localhost" in your site name. Please correct and try again.');
  }
  return $requirements;
}

/*
 * Implements hook_schema()
 */
function qbwc_schema() {
  $schema['qbwc'] = array(
    'description' => 'Quickbooks Webconnector endpoints and settings',
    'fields' => array(
      'id' => array(
        'description' => 'unique ID for each endpoint',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'bookid' => array(
        'description' => 'machine id of unique data set this endpoint:username is associated with',
        'type' => 'int'
      ),
      'endpoint' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'qwc_username' => array(
        'description' => 'UserName',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'password' => array(
        'description' => 'Password',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'qwc_ownerid' => array(
        'description' => 'OwnerID',
        'type' => 'varchar',
        'length' => 38,
        'not null' => TRUE,
      ),
      'qwc_fileid' => array(
        'description' => 'FileID',
        'type' => 'varchar',
        'length' => 38,
        'not null' => TRUE,
      ),
      'qwc_isreadonly' => array( // true || false
        'description' => 'IsReadonly',
        'type' => 'varchar',
        'length' => 5,
        'not null' => TRUE,
        'default' => 'false',
      ),
      'qwc_authflags' => array(
        'description' => 'Authflags',
        'type' => 'varchar',
        'length' => 3,
        'not null' => TRUE,
        'default' => '0xf',
      ),
      'qwc_qbtype' => array(
        'description' => 'QBType',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => 'QBFS',
      ),
      'ticket' => array(
        'description' => 'existing ticket -- ssh-encoded session ID',
        'type' => 'varchar',
        'length' => 36,
      ),
      'lasterr' => array(
        'description' => 'error, if applicable',
        'type' => 'int',
      ),
      'reqtotal' => array(
        'description' => 'total number of requests to process',
        'type' => 'int',
      ),
      'reqdone' => array(
        'description' => 'total number of requests processed',
        'type' => 'int',
      ),
      // saving field space for fields that aren't used in this implementation but defined in .QWC spec
      'qwc_unattendedmodepref' => array( // umpRequired || umpOptional
        'description' => 'UnattendedModePref',
        'type' => 'varchar',
        'length' => 16,
      ),
      'qwc_style' => array( // Document || DocWrapped || RPC
        'description' => 'Style',
        'type' => 'varchar',
        'length' => 16,
      ),
      'qwc_scheduler' => array( // <RunEveryNMinutes>... || <RunEveryNSeconds>...
        'description' => 'Scheduler',
        'type' => 'varchar',
        'length' => 64,
      ),
      'qwc_personaldatapref' => array( // pdpNotNeeded/pdpOptional || pdpRequired
        'description' => 'PersonalDataPref',
        'type' => 'varchar',
        'length' => 16,
      ),
      'qwc_notify' => array( // true
        'description' => 'Notify',
        'type' => 'varchar',
        'length' => 4,
      ),
      'qwc_appuniquename' => array( // Document || DocWrapped || RPC
        'description' => 'AppUniqueName',
        'type' => 'varchar',
        'length' => 16,
      ),
      'qwc_appname' => array( // Document || DocWrapped || RPC
        'description' => 'AppName',
        'type' => 'varchar',
        'length' => 64,
      ),
      'qwc_appdisplayname' => array( // Document || DocWrapped || RPC
        'description' => 'AppDisplayName',
        'type' => 'varchar',
        'length' => 64,
      ),
      'qwc_appdescription' => array( // Document || DocWrapped || RPC
        'description' => 'AppDescription',
        'type' => 'varchar',
        'length' => 80,
      ),
      'qwc_appid' => array( // Document || DocWrapped || RPC
        'description' => 'AppID',
        'type' => 'varchar',
        'length' => 32,
      ),
      'qbxml_version' => array(
        'description' => 'QBXML version',
        'type' => 'varchar',
        'length' => 16,
      ),
      'data' => array(
        'description' => 'All extraneous extra information in JSON-encoded array',
        'type' => 'blob',
        'size' => 'big',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'auth' => array( 'endpoint', 'qwc_username', 'password' ),
      'tix' => array( 'endpoint', 'ticket' ),
     ),
  );
  return( $schema );
}


/**
 * Implements hook_enable()
 */
function qbwc_enable() {
  menu_rebuild();
}

/**
 * Implements hook_disable()
 */
function qbwc_disable() {
  menu_rebuild();
}

/*
 * Update db table to add qbxml_version field and a new data field,
 * copy company info to the new data field and delete the company field
 */
function qbwc_update_7200() {
  $updates = array(
    'qbxml_version' => array(
      'description' => 'QBXML version',
      'type' => 'varchar',
      'length' => 16,
    ),
    'data' => array(
      'description' => 'All extraneous extra information in JSON-encoded array',
      'type' => 'blob',
      'size' => 'big',
    ),
  );
  foreach( $updates as $fieldname => $fielddef ) {
    if (!db_field_exists('qbwc', $fieldname)) {
      db_add_field('qbwc', $fieldname, $fielddef );
    }
  }
  $query = db_select('qbwc', 'q')
    ->fields( 'q' )
    ->execute();
  while( $result = $query->fetchAssoc() ) {
    if( !empty($result['company']) ) {
      if( empty($result['data']) ) {
        $result['data'] = array();
      }
      $result['data']['company'] = json_decode($result['company']);
      $result['data'] = json_encode($result['data']);
    }
    if( !$result['qbxml_version'] ) {
      $result['qbxml_version'] = '13.0';
    }
    db_update( 'qbwc' )
      ->fields( array('data' => $result['data'], 'qbxml_version' => $result['qbxml_version'] ) )
      ->condition( 'id', $result['id'] )
    ->execute();
  }
  if( db_field_exists('qbwc', 'company') ) {
    db_drop_field('qbwc', 'company');
  }
}

/*
 * Update db table for ticket to be 36-char UUID
 */
function qbwc_update_7201() {
  $field = array(
      'description' => 'existing ticket -- ssh-encoded session ID',
      'type' => 'varchar',
      'length' => 36,
      'default' => NULL,
  );
  db_change_field('qbwc', 'ticket', 'ticket', $field);
}